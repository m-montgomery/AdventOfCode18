"""
AUTHOR: M. Montgomery 
DATE:   12/11/2018
FILE:   day10.py 

PROMPT: 
--- Day 10: The Stars Align ---

It's no use; your navigation system simply isn't capable of providing walking directions in the arctic circle, and certainly not in 1018. The Elves suggest an alternative. In times like these, North Pole rescue operations will arrange points of light in the sky to guide missing Elves back to base. Unfortunately, the message is easy to miss: the points move slowly enough that it takes hours to align them, but have so much momentum that they only stay aligned for a second. If you blink at the wrong time, it might be hours before another message appears.

You can see these points of light floating in the distance, and record their position in the sky and their velocity, the relative change in position per second (your puzzle input). The coordinates are all given from your perspective; given enough time, those positions and velocities will move the points into a cohesive message! Rather than wait, you decide to fast-forward the process and calculate what the points will eventually spell. For example, suppose you note the following points:

position=< 9,  1> velocity=< 0,  2>
position=< 7,  0> velocity=<-1,  0>
position=< 3, -2> velocity=<-1,  1>
position=< 6, 10> velocity=<-2, -1>
position=< 2, -4> velocity=< 2,  2>
position=<-6, 10> velocity=< 2, -2>
position=< 1,  8> velocity=< 1, -1>
position=< 1,  7> velocity=< 1,  0>
position=<-3, 11> velocity=< 1, -2>
position=< 7,  6> velocity=<-1, -1>
position=<-2,  3> velocity=< 1,  0>
position=<-4,  3> velocity=< 2,  0>
position=<10, -3> velocity=<-1,  1>
position=< 5, 11> velocity=< 1, -2>
position=< 4,  7> velocity=< 0, -1>
position=< 8, -2> velocity=< 0,  1>
position=<15,  0> velocity=<-2,  0>
position=< 1,  6> velocity=< 1,  0>
position=< 8,  9> velocity=< 0, -1>
position=< 3,  3> velocity=<-1,  1>
position=< 0,  5> velocity=< 0, -1>
position=<-2,  2> velocity=< 2,  0>
position=< 5, -2> velocity=< 1,  2>
position=< 1,  4> velocity=< 2,  1>
position=<-2,  7> velocity=< 2, -2>
position=< 3,  6> velocity=<-1, -1>
position=< 5,  0> velocity=< 1,  0>
position=<-6,  0> velocity=< 2,  0>
position=< 5,  9> velocity=< 1, -2>
position=<14,  7> velocity=<-2,  0>
position=<-3,  6> velocity=< 2, -1>

Each line represents one point. Positions are given as <X, Y> pairs: X represents how far left (negative) or right (positive) the point appears, while Y represents how far up (negative) or down (positive) the point appears.

At 0 seconds, each point has the position given. Each second, each point's velocity is added to its position. So, a point with velocity <1, -2> is moving to the right, but is moving upward twice as quickly. If this point's initial position were <3, 9>, after 3 seconds, its position would become <6, 3>.

Over time, the points listed above would move like this:

Initially:
........#.............
................#.....
.........#.#..#.......
......................
#..........#.#.......#
...............#......
....#.................
..#.#....#............
.......#..............
......#...............
...#...#.#...#........
....#..#..#.........#.
.......#..............
...........#..#.......
#...........#.........
...#.......#..........

After 1 second:
......................
......................
..........#....#......
........#.....#.......
..#.........#......#..
......................
......#...............
....##.........#......
......#.#.............
.....##.##..#.........
........#.#...........
........#...#.....#...
..#...........#.......
....#.....#.#.........
......................
......................

After 2 seconds:
......................
......................
......................
..............#.......
....#..#...####..#....
......................
........#....#........
......#.#.............
.......#...#..........
.......#..#..#.#......
....#....#.#..........
.....#...#...##.#.....
........#.............
......................
......................
......................

After 3 seconds:
......................
......................
......................
......................
......#...#..###......
......#...#...#.......
......#...#...#.......
......#####...#.......
......#...#...#.......
......#...#...#.......
......#...#...#.......
......#...#..###......
......................
......................
......................
......................

After 4 seconds:
......................
......................
......................
............#.........
........##...#.#......
......#.....#..#......
.....#..##.##.#.......
.......##.#....#......
...........#....#.....
..............#.......
....#......#...#......
.....#.....##.........
...............#......
...............#......
......................
......................

After 3 seconds, the message appeared briefly: HI. Of course, your message will be much longer and will take many more seconds to appear. What message will eventually appear in the sky?

--- Part Two ---

Good thing you didn't have to wait, because that would have taken a long time - much longer than the 3 seconds in the example above. Impressed by your sub-hour communication capabilities, the Elves are curious: exactly how many seconds would they have needed to wait for that message to appear?
"""

import sys, re


class Point:

    def __init__(self, position, velocity):
        self.x, self.y = position
        self.deltaX, self.deltaY = velocity

    def move(self):
        self.x += self.deltaX
        self.y += self.deltaY

    def getPosition(self):
        return (self.x, self.y)


def getMessage(points):
    """ Given a list of points, determines a reasonable range within which
        to print and view the message at any given point in time. User must
        view output to determine which iteration is correct. """

    # track bounding box around points
    coords = [[point.x, point.y] for point in points]
    deltas = [(point.deltaX, point.deltaY) for point in points]
    Xdiff = float('inf')
    Ydiff = float('inf')

    # move points until close enough to view
    secs = 0
    while Xdiff > 100 or Ydiff > 100:

        # move points
        for i in range(len(coords)):
            coords[i][0] += deltas[i][0]
            coords[i][1] += deltas[i][1]
    
        # update bounding box size
        Xdiff = max([x for x,y in coords]) - min([x for x,y in coords])
        Ydiff = max([y for x,y in coords]) - min([y for x,y in coords])

        secs += 1


    # display points until message is visible
    while Xdiff <= 100 and Ydiff <= 100:

        # update bounding box size, translation value
        Xdelta = min([x for x,y in coords])
        Ydelta = min([y for x,y in coords])
        Xdiff = max([x for x,y in coords]) - Xdelta
        Ydiff = max([y for x,y in coords]) - Ydelta

        # create grid
        display = [["."] * (Xdiff+1) for y in range(Ydiff+1)]

        # place in grid and move points
        for i in range(len(coords)):
            x, y = coords[i]
            display[y-Ydelta][x-Xdelta] = "#"
            coords[i][0] += deltas[i][0]
            coords[i][1] += deltas[i][1]

        # display points
        print("\n", secs, "seconds")
        for i in display:
            for j in i:
                print(j, end="")
            print()
        secs += 1

        
def getPoints(lines):
    """ Given lines of input, creates and returns a list of new Point objects
        with values based on input line content. """

    points = []    
    Rline = re.compile("position=<\s*(-?\d+),\s*(-?\d+)> "
                       "velocity=<\s*(-?\d+),\s*(-?\d+)>")
    for line in lines:
        data = Rline.search(line)
        if data:
            points.append(Point((int(data.group(1)), int(data.group(2))),
                                (int(data.group(3)), int(data.group(4)))))

    return points

        
def main():

    # get input
    lines = [line.strip() for line in sys.stdin.readlines()]
    points = getPoints(lines)

    # PART 1 and PART 2
    getMessage(points)
    

if __name__ == "__main__":
    main()
